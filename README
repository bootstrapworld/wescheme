WeScheme is an online programming environment based on DrRacket and
Scheme. Like DrRacket, it provides an interactive evaluator and an
interface for editing and running programs. In contrast to DrRacket,
WeScheme evaluates on the browser with JavaScript. Its main audience
is the Bootstrap curriculum, a middle-school curriculum for teaching
algebra through programming.

This repo contains the source code of the WeScheme server. The
official live server can be found at : http://www.wescheme.org/

The user-level documentation for the project is maintained in:

   https://github.com/dyoo/wescheme-docs


----------------------------------------------------------------------
Build dependencies:

In order to build the server, the following tools are needed:
 - Node 16.15.* (or latest LTS version)
   - npm 8.11.0 (should be included in Node download)
 - Git
 - JDK 17
 - Racket
 - Apache Ant

All these should be accessible from $PATH. The tools assume a
Unix-like environment to run shell commands, including 'unzip'. See
the section below, if you're building the project on a Windows
machine.

You will also need to make sure that the DEFAULT_ENCODING environment variable
on your system is set to "UTF-8". On some systems, the build will fail if
the appengine.xml settings differ from those of the environment.

----------------------------------------------------------------------

Installing WeScheme for local development


1.  First, check out the WeScheme repository from Github.

   $ git clone git://github.com/bootstrapworld/wescheme

2.  Run 'build-console-and-editor.rkt' to generate all the JS bundles needed for the webserver. This script will also check to ensure that node dependencies are installed. If not, it will run `npm install` before generating the bundles.

IMPORTANT:
The script "build-console-and-editor.rkt" must be executed after any
changes are made to the javascript source files in war-src/js.  The
webapp itself uses files in war, which are built by
build-console-and-editor.  Also, the builder also re-compresses
JavaScript files (such as CodeMirror) with the Closure Compiler, so
you must run this every time you change the JavaScript files.


----------------------------------------------------------------------

Running WeScheme locally:

After running build-console-and-editor.rkt, run `./runserver` to use the
gcloud java appserver.

   $ ./runserver.sh

This will bring up a locally-running Webserver running off port 8080.


----------------------------------------------------------------------

Hacking WeScheme:

The directory structure of WeScheme is a fairly typical Java web app.

Treat `war` as an output distribution directory.  Do not try to modify
files in there directly!  Rather, the majority of the JavaScript files
can be found in:

   war-src/js

which are packaged up via Closure into single JavaScript files, one
per application page.

    console: war/console.jsp, war/js/console-calc.js

        Implements the directory listing of a user's programs.


    openEditor: war/openEditor/index.jsp, war/js/openEditor-calc.js

        Implements main editor window; implements the main WeScheme interface
        (REPL, text editor)


    view: war/view.jsp, war/js/view-calc.js
    run: war/run.jsp

        Implements the viewing and running of programs outside of the
        editing environment.

----------------------------------------------------------------------
Building on a Windows Machine 

FIXME(Nicholas)

The build tools of this project requires a unix-like environment. The
bash shell that is part of the standard installation of "GIT for
Windows" will do perfectly. Get it here, if you don't have it yet.

http://git-for-windows.github.io/

To install WeScheme, follow the instructions of the section
"Installing WeScheme for local development" above, but before you
execute the script 'build-console-and-editor.rkt', make sure that a
softlink to your java.exe is defined the current directory. You can
create such a link with the command:

   $ ln -s "C:\Program Files (x86)\Java\jdk1.8.0_XX\bin\java.exe" java

Note that the link must be named "java" and not "java.exe".

----------------------------------------------------------------------
The Selenium Test Suite - extremely outdated, and unlikely to work

We use Selenium (http://seleniumhq.org)

To use the suite:

1. Install firefox
2. Install selenium IDE @ http://seleniumhq.org/download/
3. Open up firefox
4. To open selenium, in firefox go to Tools -> Selenium IDE
5. Visit the openEditor page of the wescheme instance in Firefox.
6. in the IDE, go to File -> Open Test Suite
7. Open "full-suite" in testing/
8. Run with the green arrows in the Selenium IDE


Note that the tests as currently written have not yet been coded
to respect some of the delays introduced by asynchronous JavaScript, so
many of the tests will fail unless the speed of the testing framework is
set to slightly slower than the "Fast" speed.

----------------------------------------------------------------------

Upload process:

Run `rebuild-and-upload.sh`, supplying a version string as the argument:

    $ ./rebuild-and-upload.sh MyTest

This will deploy a version of WeScheme to `https://MyTest-dot-wescheme-hrd-2.appspot.com`. During deployment, you will have the option of promoting the WeScheme.org this new version. We **strong recommend against this**. Instead, test the app first at the aforementioned URL, and then promote WeScheme manually from the Google Console: https://console.cloud.google.com/appengine/versions?project=wescheme-hrd-2&serviceId=default&versionssize=50 .
